{"id":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","dependencies":[{"name":"/Users/robkotenko/Documents/docs/chgpa-sites/package.json","includedInParent":true,"mtime":1567446810165},{"name":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/package.json","includedInParent":true,"mtime":1567183294748},{"name":"../gridOptionsWrapper","loc":{"line":21,"column":35},"parent":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","resolved":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/gridOptionsWrapper.js"},{"name":"../logger","loc":{"line":22,"column":23},"parent":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","resolved":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/logger.js"},{"name":"./columnUtils","loc":{"line":23,"column":28},"parent":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","resolved":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnUtils.js"},{"name":"./columnKeyCreator","loc":{"line":24,"column":33},"parent":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","resolved":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnKeyCreator.js"},{"name":"../entities/originalColumnGroup","loc":{"line":25,"column":36},"parent":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","resolved":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/entities/originalColumnGroup.js"},{"name":"../entities/column","loc":{"line":26,"column":23},"parent":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","resolved":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/entities/column.js"},{"name":"../context/context","loc":{"line":27,"column":24},"parent":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","resolved":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/context/context.js"},{"name":"../entities/defaultColumnTypes","loc":{"line":28,"column":35},"parent":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","resolved":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/entities/defaultColumnTypes.js"},{"name":"../utils","loc":{"line":29,"column":22},"parent":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","resolved":"/Users/robkotenko/Documents/docs/chgpa-sites/node_modules/ag-grid-community/dist/lib/utils/index.js"}],"generated":{"js":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar logger_1 = require(\"../logger\");\nvar columnUtils_1 = require(\"./columnUtils\");\nvar columnKeyCreator_1 = require(\"./columnKeyCreator\");\nvar originalColumnGroup_1 = require(\"../entities/originalColumnGroup\");\nvar column_1 = require(\"../entities/column\");\nvar context_1 = require(\"../context/context\");\nvar defaultColumnTypes_1 = require(\"../entities/defaultColumnTypes\");\nvar utils_1 = require(\"../utils\");\n// takes ColDefs and ColGroupDefs and turns them into Columns and OriginalGroups\nvar ColumnFactory = /** @class */ (function () {\n    function ColumnFactory() {\n    }\n    ColumnFactory.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('ColumnFactory');\n    };\n    ColumnFactory.prototype.createColumnTree = function (defs, primaryColumns, existingColumns) {\n        // column key creator dishes out unique column id's in a deterministic way,\n        // so if we have two grids (that could be master/slave) with same column definitions,\n        // then this ensures the two grids use identical id's.\n        var columnKeyCreator = new columnKeyCreator_1.ColumnKeyCreator();\n        if (existingColumns) {\n            var existingKeys = existingColumns.map(function (col) { return col.getId(); });\n            columnKeyCreator.addExistingKeys(existingKeys);\n        }\n        // we take a copy of the columns as we are going to be removing from them\n        var existingColsCopy = existingColumns ? existingColumns.slice() : null;\n        // create am unbalanced tree that maps the provided definitions\n        var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingColsCopy, columnKeyCreator, null);\n        var treeDept = this.findMaxDept(unbalancedTree, 0);\n        this.logger.log('Number of levels for grouped columns is ' + treeDept);\n        var res = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);\n        var deptFirstCallback = function (child, parent) {\n            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {\n                child.setupExpandable();\n            }\n            // we set the original parents at the end, rather than when we go along, as balancing the tree\n            // adds extra levels into the tree. so we can only set parents when balancing is done.\n            child.setOriginalParent(parent);\n        };\n        this.columnUtils.depthFirstOriginalTreeSearch(null, res, deptFirstCallback);\n        return {\n            columnTree: res,\n            treeDept: treeDept\n        };\n    };\n    ColumnFactory.prototype.createForAutoGroups = function (autoGroupCols, gridBalancedTree) {\n        var _this = this;\n        var autoColBalancedTree = [];\n        autoGroupCols.forEach(function (col) {\n            var fakeTreeItem = _this.createAutoGroupTreeItem(gridBalancedTree, col);\n            autoColBalancedTree.push(fakeTreeItem);\n        });\n        return autoColBalancedTree;\n    };\n    ColumnFactory.prototype.createAutoGroupTreeItem = function (balancedColumnTree, column) {\n        var dept = this.findDepth(balancedColumnTree);\n        // at the end, this will be the top of the tree item.\n        var nextChild = column;\n        for (var i = dept - 1; i >= 0; i--) {\n            var autoGroup = new originalColumnGroup_1.OriginalColumnGroup(null, \"FAKE_PATH_\" + column.getId() + \"}_\" + i, true, i);\n            this.context.wireBean(autoGroup);\n            autoGroup.setChildren([nextChild]);\n            nextChild.setOriginalParent(autoGroup);\n            nextChild = autoGroup;\n        }\n        // at this point, the nextChild is the top most item in the tree\n        return nextChild;\n    };\n    ColumnFactory.prototype.findDepth = function (balancedColumnTree) {\n        var dept = 0;\n        var pointer = balancedColumnTree;\n        while (pointer && pointer[0] && pointer[0] instanceof originalColumnGroup_1.OriginalColumnGroup) {\n            dept++;\n            pointer = pointer[0].getChildren();\n        }\n        return dept;\n    };\n    ColumnFactory.prototype.balanceColumnTree = function (unbalancedTree, currentDept, columnDept, columnKeyCreator) {\n        var result = [];\n        // go through each child, for groups, recurse a level deeper,\n        // for columns we need to pad\n        for (var i = 0; i < unbalancedTree.length; i++) {\n            var child = unbalancedTree[i];\n            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {\n                // child is a group, all we do is go to the next level of recursion\n                var originalGroup = child;\n                var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);\n                originalGroup.setChildren(newChildren);\n                result.push(originalGroup);\n            }\n            else {\n                // child is a column - so here we add in the padded column groups if needed\n                var firstPaddedGroup = void 0;\n                var currentPaddedGroup = void 0;\n                // this for loop will NOT run any loops if no padded column groups are needed\n                for (var j = columnDept - 1; j >= currentDept; j--) {\n                    var newColId = columnKeyCreator.getUniqueKey(null, null);\n                    var colGroupDefMerged = this.createMergedColGroupDef(null);\n                    var paddedGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, newColId, true, currentDept);\n                    this.context.wireBean(paddedGroup);\n                    if (currentPaddedGroup) {\n                        currentPaddedGroup.setChildren([paddedGroup]);\n                    }\n                    currentPaddedGroup = paddedGroup;\n                    if (!firstPaddedGroup) {\n                        firstPaddedGroup = currentPaddedGroup;\n                    }\n                }\n                // likewise this if statement will not run if no padded groups\n                if (firstPaddedGroup) {\n                    result.push(firstPaddedGroup);\n                    var hasGroups = unbalancedTree.some(function (child) { return child instanceof originalColumnGroup_1.OriginalColumnGroup; });\n                    if (hasGroups) {\n                        currentPaddedGroup.setChildren([child]);\n                        continue;\n                    }\n                    else {\n                        currentPaddedGroup.setChildren(unbalancedTree);\n                        break;\n                    }\n                }\n                result.push(child);\n            }\n        }\n        return result;\n    };\n    ColumnFactory.prototype.findMaxDept = function (treeChildren, dept) {\n        var maxDeptThisLevel = dept;\n        for (var i = 0; i < treeChildren.length; i++) {\n            var abstractColumn = treeChildren[i];\n            if (abstractColumn instanceof originalColumnGroup_1.OriginalColumnGroup) {\n                var originalGroup = abstractColumn;\n                var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);\n                if (maxDeptThisLevel < newDept) {\n                    maxDeptThisLevel = newDept;\n                }\n            }\n        }\n        return maxDeptThisLevel;\n    };\n    ColumnFactory.prototype.recursivelyCreateColumns = function (defs, level, primaryColumns, existingColsCopy, columnKeyCreator, parent) {\n        var _this = this;\n        var result = [];\n        if (!defs) {\n            return result;\n        }\n        defs.forEach(function (def) {\n            var newGroupOrColumn;\n            if (_this.isColumnGroup(def)) {\n                newGroupOrColumn = _this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, parent);\n            }\n            else {\n                newGroupOrColumn = _this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator, parent);\n            }\n            result.push(newGroupOrColumn);\n        });\n        return result;\n    };\n    ColumnFactory.prototype.createColumnGroup = function (primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, parent) {\n        var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);\n        var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId, null);\n        var originalGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, groupId, false, level);\n        this.context.wireBean(originalGroup);\n        var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, originalGroup);\n        originalGroup.setChildren(children);\n        return originalGroup;\n    };\n    ColumnFactory.prototype.createMergedColGroupDef = function (colGroupDef) {\n        var colGroupDefMerged = {};\n        utils_1._.assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());\n        utils_1._.assign(colGroupDefMerged, colGroupDef);\n        this.checkForDeprecatedItems(colGroupDefMerged);\n        return colGroupDefMerged;\n    };\n    ColumnFactory.prototype.createColumn = function (primaryColumns, colDef, existingColsCopy, columnKeyCreator, parent) {\n        var colDefMerged = this.mergeColDefs(colDef);\n        this.checkForDeprecatedItems(colDefMerged);\n        // see if column already exists\n        var column = this.findExistingColumn(colDef, existingColsCopy);\n        if (!column) {\n            // no existing column, need to create one\n            var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);\n            column = new column_1.Column(colDefMerged, colDef, colId, primaryColumns);\n            this.context.wireBean(column);\n        }\n        else {\n            column.setColDef(colDefMerged, colDef);\n        }\n        return column;\n    };\n    ColumnFactory.prototype.findExistingColumn = function (colDef, existingColsCopy) {\n        var res = utils_1._.find(existingColsCopy, function (col) {\n            var oldColDef = col.getUserProvidedColDef();\n            if (!oldColDef) {\n                return false;\n            }\n            // first check object references\n            if (oldColDef === colDef) {\n                return true;\n            }\n            // second check id's\n            var oldColHadId = oldColDef.colId !== null && oldColDef.colId !== undefined;\n            if (oldColHadId) {\n                return oldColDef.colId === colDef.colId;\n            }\n            else {\n                return false;\n            }\n        });\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (res) {\n            utils_1._.removeFromArray(existingColsCopy, res);\n        }\n        return res;\n    };\n    ColumnFactory.prototype.mergeColDefs = function (colDef) {\n        // start with empty merged definition\n        var colDefMerged = {};\n        // merge properties from default column definitions\n        utils_1._.assign(colDefMerged, this.gridOptionsWrapper.getDefaultColDef());\n        // merge properties from column type properties\n        if (colDef.type) {\n            this.assignColumnTypes(colDef, colDefMerged);\n        }\n        // merge properties from column definitions\n        utils_1._.assign(colDefMerged, colDef);\n        return colDefMerged;\n    };\n    ColumnFactory.prototype.assignColumnTypes = function (colDef, colDefMerged) {\n        var typeKeys;\n        if (colDef.type instanceof Array) {\n            var invalidArray = colDef.type.some(function (a) { return typeof a !== 'string'; });\n            if (invalidArray) {\n                console.warn(\"ag-grid: if colDef.type is supplied an array it should be of type 'string[]'\");\n            }\n            else {\n                typeKeys = colDef.type;\n            }\n        }\n        else if (typeof colDef.type === 'string') {\n            typeKeys = colDef.type.split(',');\n        }\n        else {\n            console.warn(\"ag-grid: colDef.type should be of type 'string' | 'string[]'\");\n            return;\n        }\n        // merge user defined with default column types\n        var allColumnTypes = utils_1._.assign({}, this.gridOptionsWrapper.getColumnTypes(), defaultColumnTypes_1.DefaultColumnTypes);\n        typeKeys.forEach(function (t) {\n            var typeColDef = allColumnTypes[t.trim()];\n            if (typeColDef) {\n                utils_1._.assign(colDefMerged, typeColDef);\n            }\n            else {\n                console.warn(\"ag-grid: colDef.type '\" + t + \"' does not correspond to defined gridOptions.columnTypes\");\n            }\n        });\n    };\n    ColumnFactory.prototype.checkForDeprecatedItems = function (colDef) {\n        if (colDef) {\n            var colDefNoType = colDef; // take out the type, so we can access attributes not defined in the type\n            if (colDefNoType.group !== undefined) {\n                console.warn('ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');\n            }\n            if (colDefNoType.headerGroup !== undefined) {\n                console.warn('ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');\n            }\n            if (colDefNoType.headerGroupShow !== undefined) {\n                console.warn('ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');\n            }\n            if (colDefNoType.suppressRowGroup !== undefined) {\n                console.warn('ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead');\n            }\n            if (colDefNoType.suppressAggregation !== undefined) {\n                console.warn('ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead');\n            }\n            if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {\n                console.warn('ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead');\n            }\n            if (colDefNoType.displayName) {\n                console.warn(\"ag-grid: Found displayName \" + colDefNoType.displayName + \", please use headerName instead, displayName is deprecated.\");\n                colDefNoType.headerName = colDefNoType.displayName;\n            }\n        }\n    };\n    // if object has children, we assume it's a group\n    ColumnFactory.prototype.isColumnGroup = function (abstractColDef) {\n        return abstractColDef.children !== undefined;\n    };\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], ColumnFactory.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('columnUtils'),\n        __metadata(\"design:type\", columnUtils_1.ColumnUtils)\n    ], ColumnFactory.prototype, \"columnUtils\", void 0);\n    __decorate([\n        context_1.Autowired('context'),\n        __metadata(\"design:type\", context_1.Context)\n    ], ColumnFactory.prototype, \"context\", void 0);\n    __decorate([\n        __param(0, context_1.Qualifier('loggerFactory')),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [logger_1.LoggerFactory]),\n        __metadata(\"design:returntype\", void 0)\n    ], ColumnFactory.prototype, \"setBeans\", null);\n    ColumnFactory = __decorate([\n        context_1.Bean('columnFactory')\n    ], ColumnFactory);\n    return ColumnFactory;\n}());\nexports.ColumnFactory = ColumnFactory;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}}],"sources":{"node_modules/ag-grid-community/dist/lib/columnController/columnFactory.js":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.2.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar logger_1 = require(\"../logger\");\nvar columnUtils_1 = require(\"./columnUtils\");\nvar columnKeyCreator_1 = require(\"./columnKeyCreator\");\nvar originalColumnGroup_1 = require(\"../entities/originalColumnGroup\");\nvar column_1 = require(\"../entities/column\");\nvar context_1 = require(\"../context/context\");\nvar defaultColumnTypes_1 = require(\"../entities/defaultColumnTypes\");\nvar utils_1 = require(\"../utils\");\n// takes ColDefs and ColGroupDefs and turns them into Columns and OriginalGroups\nvar ColumnFactory = /** @class */ (function () {\n    function ColumnFactory() {\n    }\n    ColumnFactory.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('ColumnFactory');\n    };\n    ColumnFactory.prototype.createColumnTree = function (defs, primaryColumns, existingColumns) {\n        // column key creator dishes out unique column id's in a deterministic way,\n        // so if we have two grids (that could be master/slave) with same column definitions,\n        // then this ensures the two grids use identical id's.\n        var columnKeyCreator = new columnKeyCreator_1.ColumnKeyCreator();\n        if (existingColumns) {\n            var existingKeys = existingColumns.map(function (col) { return col.getId(); });\n            columnKeyCreator.addExistingKeys(existingKeys);\n        }\n        // we take a copy of the columns as we are going to be removing from them\n        var existingColsCopy = existingColumns ? existingColumns.slice() : null;\n        // create am unbalanced tree that maps the provided definitions\n        var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingColsCopy, columnKeyCreator, null);\n        var treeDept = this.findMaxDept(unbalancedTree, 0);\n        this.logger.log('Number of levels for grouped columns is ' + treeDept);\n        var res = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);\n        var deptFirstCallback = function (child, parent) {\n            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {\n                child.setupExpandable();\n            }\n            // we set the original parents at the end, rather than when we go along, as balancing the tree\n            // adds extra levels into the tree. so we can only set parents when balancing is done.\n            child.setOriginalParent(parent);\n        };\n        this.columnUtils.depthFirstOriginalTreeSearch(null, res, deptFirstCallback);\n        return {\n            columnTree: res,\n            treeDept: treeDept\n        };\n    };\n    ColumnFactory.prototype.createForAutoGroups = function (autoGroupCols, gridBalancedTree) {\n        var _this = this;\n        var autoColBalancedTree = [];\n        autoGroupCols.forEach(function (col) {\n            var fakeTreeItem = _this.createAutoGroupTreeItem(gridBalancedTree, col);\n            autoColBalancedTree.push(fakeTreeItem);\n        });\n        return autoColBalancedTree;\n    };\n    ColumnFactory.prototype.createAutoGroupTreeItem = function (balancedColumnTree, column) {\n        var dept = this.findDepth(balancedColumnTree);\n        // at the end, this will be the top of the tree item.\n        var nextChild = column;\n        for (var i = dept - 1; i >= 0; i--) {\n            var autoGroup = new originalColumnGroup_1.OriginalColumnGroup(null, \"FAKE_PATH_\" + column.getId() + \"}_\" + i, true, i);\n            this.context.wireBean(autoGroup);\n            autoGroup.setChildren([nextChild]);\n            nextChild.setOriginalParent(autoGroup);\n            nextChild = autoGroup;\n        }\n        // at this point, the nextChild is the top most item in the tree\n        return nextChild;\n    };\n    ColumnFactory.prototype.findDepth = function (balancedColumnTree) {\n        var dept = 0;\n        var pointer = balancedColumnTree;\n        while (pointer && pointer[0] && pointer[0] instanceof originalColumnGroup_1.OriginalColumnGroup) {\n            dept++;\n            pointer = pointer[0].getChildren();\n        }\n        return dept;\n    };\n    ColumnFactory.prototype.balanceColumnTree = function (unbalancedTree, currentDept, columnDept, columnKeyCreator) {\n        var result = [];\n        // go through each child, for groups, recurse a level deeper,\n        // for columns we need to pad\n        for (var i = 0; i < unbalancedTree.length; i++) {\n            var child = unbalancedTree[i];\n            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {\n                // child is a group, all we do is go to the next level of recursion\n                var originalGroup = child;\n                var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);\n                originalGroup.setChildren(newChildren);\n                result.push(originalGroup);\n            }\n            else {\n                // child is a column - so here we add in the padded column groups if needed\n                var firstPaddedGroup = void 0;\n                var currentPaddedGroup = void 0;\n                // this for loop will NOT run any loops if no padded column groups are needed\n                for (var j = columnDept - 1; j >= currentDept; j--) {\n                    var newColId = columnKeyCreator.getUniqueKey(null, null);\n                    var colGroupDefMerged = this.createMergedColGroupDef(null);\n                    var paddedGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, newColId, true, currentDept);\n                    this.context.wireBean(paddedGroup);\n                    if (currentPaddedGroup) {\n                        currentPaddedGroup.setChildren([paddedGroup]);\n                    }\n                    currentPaddedGroup = paddedGroup;\n                    if (!firstPaddedGroup) {\n                        firstPaddedGroup = currentPaddedGroup;\n                    }\n                }\n                // likewise this if statement will not run if no padded groups\n                if (firstPaddedGroup) {\n                    result.push(firstPaddedGroup);\n                    var hasGroups = unbalancedTree.some(function (child) { return child instanceof originalColumnGroup_1.OriginalColumnGroup; });\n                    if (hasGroups) {\n                        currentPaddedGroup.setChildren([child]);\n                        continue;\n                    }\n                    else {\n                        currentPaddedGroup.setChildren(unbalancedTree);\n                        break;\n                    }\n                }\n                result.push(child);\n            }\n        }\n        return result;\n    };\n    ColumnFactory.prototype.findMaxDept = function (treeChildren, dept) {\n        var maxDeptThisLevel = dept;\n        for (var i = 0; i < treeChildren.length; i++) {\n            var abstractColumn = treeChildren[i];\n            if (abstractColumn instanceof originalColumnGroup_1.OriginalColumnGroup) {\n                var originalGroup = abstractColumn;\n                var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);\n                if (maxDeptThisLevel < newDept) {\n                    maxDeptThisLevel = newDept;\n                }\n            }\n        }\n        return maxDeptThisLevel;\n    };\n    ColumnFactory.prototype.recursivelyCreateColumns = function (defs, level, primaryColumns, existingColsCopy, columnKeyCreator, parent) {\n        var _this = this;\n        var result = [];\n        if (!defs) {\n            return result;\n        }\n        defs.forEach(function (def) {\n            var newGroupOrColumn;\n            if (_this.isColumnGroup(def)) {\n                newGroupOrColumn = _this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, parent);\n            }\n            else {\n                newGroupOrColumn = _this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator, parent);\n            }\n            result.push(newGroupOrColumn);\n        });\n        return result;\n    };\n    ColumnFactory.prototype.createColumnGroup = function (primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, parent) {\n        var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);\n        var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId, null);\n        var originalGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, groupId, false, level);\n        this.context.wireBean(originalGroup);\n        var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, originalGroup);\n        originalGroup.setChildren(children);\n        return originalGroup;\n    };\n    ColumnFactory.prototype.createMergedColGroupDef = function (colGroupDef) {\n        var colGroupDefMerged = {};\n        utils_1._.assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());\n        utils_1._.assign(colGroupDefMerged, colGroupDef);\n        this.checkForDeprecatedItems(colGroupDefMerged);\n        return colGroupDefMerged;\n    };\n    ColumnFactory.prototype.createColumn = function (primaryColumns, colDef, existingColsCopy, columnKeyCreator, parent) {\n        var colDefMerged = this.mergeColDefs(colDef);\n        this.checkForDeprecatedItems(colDefMerged);\n        // see if column already exists\n        var column = this.findExistingColumn(colDef, existingColsCopy);\n        if (!column) {\n            // no existing column, need to create one\n            var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);\n            column = new column_1.Column(colDefMerged, colDef, colId, primaryColumns);\n            this.context.wireBean(column);\n        }\n        else {\n            column.setColDef(colDefMerged, colDef);\n        }\n        return column;\n    };\n    ColumnFactory.prototype.findExistingColumn = function (colDef, existingColsCopy) {\n        var res = utils_1._.find(existingColsCopy, function (col) {\n            var oldColDef = col.getUserProvidedColDef();\n            if (!oldColDef) {\n                return false;\n            }\n            // first check object references\n            if (oldColDef === colDef) {\n                return true;\n            }\n            // second check id's\n            var oldColHadId = oldColDef.colId !== null && oldColDef.colId !== undefined;\n            if (oldColHadId) {\n                return oldColDef.colId === colDef.colId;\n            }\n            else {\n                return false;\n            }\n        });\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (res) {\n            utils_1._.removeFromArray(existingColsCopy, res);\n        }\n        return res;\n    };\n    ColumnFactory.prototype.mergeColDefs = function (colDef) {\n        // start with empty merged definition\n        var colDefMerged = {};\n        // merge properties from default column definitions\n        utils_1._.assign(colDefMerged, this.gridOptionsWrapper.getDefaultColDef());\n        // merge properties from column type properties\n        if (colDef.type) {\n            this.assignColumnTypes(colDef, colDefMerged);\n        }\n        // merge properties from column definitions\n        utils_1._.assign(colDefMerged, colDef);\n        return colDefMerged;\n    };\n    ColumnFactory.prototype.assignColumnTypes = function (colDef, colDefMerged) {\n        var typeKeys;\n        if (colDef.type instanceof Array) {\n            var invalidArray = colDef.type.some(function (a) { return typeof a !== 'string'; });\n            if (invalidArray) {\n                console.warn(\"ag-grid: if colDef.type is supplied an array it should be of type 'string[]'\");\n            }\n            else {\n                typeKeys = colDef.type;\n            }\n        }\n        else if (typeof colDef.type === 'string') {\n            typeKeys = colDef.type.split(',');\n        }\n        else {\n            console.warn(\"ag-grid: colDef.type should be of type 'string' | 'string[]'\");\n            return;\n        }\n        // merge user defined with default column types\n        var allColumnTypes = utils_1._.assign({}, this.gridOptionsWrapper.getColumnTypes(), defaultColumnTypes_1.DefaultColumnTypes);\n        typeKeys.forEach(function (t) {\n            var typeColDef = allColumnTypes[t.trim()];\n            if (typeColDef) {\n                utils_1._.assign(colDefMerged, typeColDef);\n            }\n            else {\n                console.warn(\"ag-grid: colDef.type '\" + t + \"' does not correspond to defined gridOptions.columnTypes\");\n            }\n        });\n    };\n    ColumnFactory.prototype.checkForDeprecatedItems = function (colDef) {\n        if (colDef) {\n            var colDefNoType = colDef; // take out the type, so we can access attributes not defined in the type\n            if (colDefNoType.group !== undefined) {\n                console.warn('ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');\n            }\n            if (colDefNoType.headerGroup !== undefined) {\n                console.warn('ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');\n            }\n            if (colDefNoType.headerGroupShow !== undefined) {\n                console.warn('ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');\n            }\n            if (colDefNoType.suppressRowGroup !== undefined) {\n                console.warn('ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead');\n            }\n            if (colDefNoType.suppressAggregation !== undefined) {\n                console.warn('ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead');\n            }\n            if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {\n                console.warn('ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead');\n            }\n            if (colDefNoType.displayName) {\n                console.warn(\"ag-grid: Found displayName \" + colDefNoType.displayName + \", please use headerName instead, displayName is deprecated.\");\n                colDefNoType.headerName = colDefNoType.displayName;\n            }\n        }\n    };\n    // if object has children, we assume it's a group\n    ColumnFactory.prototype.isColumnGroup = function (abstractColDef) {\n        return abstractColDef.children !== undefined;\n    };\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], ColumnFactory.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('columnUtils'),\n        __metadata(\"design:type\", columnUtils_1.ColumnUtils)\n    ], ColumnFactory.prototype, \"columnUtils\", void 0);\n    __decorate([\n        context_1.Autowired('context'),\n        __metadata(\"design:type\", context_1.Context)\n    ], ColumnFactory.prototype, \"context\", void 0);\n    __decorate([\n        __param(0, context_1.Qualifier('loggerFactory')),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [logger_1.LoggerFactory]),\n        __metadata(\"design:returntype\", void 0)\n    ], ColumnFactory.prototype, \"setBeans\", null);\n    ColumnFactory = __decorate([\n        context_1.Bean('columnFactory')\n    ], ColumnFactory);\n    return ColumnFactory;\n}());\nexports.ColumnFactory = ColumnFactory;\n"},"lineCount":336}},"error":null,"hash":"1f3983df326051eb097c80b5bf04d396","cacheData":{"env":{}}}